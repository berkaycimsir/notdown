/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../schema/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  AuthErrors: "incorrect-password" | "incorrect-username-or-email" | "username-or-email-already-exists"
  NoteErrors: "user-does-not-exists"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AuthMutationReturnType: { // root type
    error?: NexusGenEnums['AuthErrors'] | null; // AuthErrors
    token?: string | null; // String
  }
  CreateNoteMutationReturnType: { // root type
    error?: NexusGenEnums['NoteErrors'] | null; // NoteErrors
    note?: NexusGenRootTypes['Note'] | null; // Note
  }
  Mutation: {};
  Note: { // root type
    authorId: number; // Int!
    id: number; // Int!
    isPublished: boolean; // Boolean!
    markdown: string; // String!
    title: string; // String!
  }
  Query: {};
  User: { // root type
    email: string; // String!
    fullName: string; // String!
    id: number; // Int!
    username: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AuthMutationReturnType: { // field return type
    error: NexusGenEnums['AuthErrors'] | null; // AuthErrors
    token: string | null; // String
  }
  CreateNoteMutationReturnType: { // field return type
    error: NexusGenEnums['NoteErrors'] | null; // NoteErrors
    note: NexusGenRootTypes['Note'] | null; // Note
  }
  Mutation: { // field return type
    createNote: NexusGenRootTypes['CreateNoteMutationReturnType']; // CreateNoteMutationReturnType!
    createUser: NexusGenRootTypes['AuthMutationReturnType']; // AuthMutationReturnType!
    signIn: NexusGenRootTypes['AuthMutationReturnType']; // AuthMutationReturnType!
  }
  Note: { // field return type
    author: NexusGenRootTypes['User']; // User!
    authorId: number; // Int!
    id: number; // Int!
    isPublished: boolean; // Boolean!
    markdown: string; // String!
    title: string; // String!
  }
  Query: { // field return type
    hello: string; // String!
    me: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    email: string; // String!
    fullName: string; // String!
    id: number; // Int!
    username: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  AuthMutationReturnType: { // field return type name
    error: 'AuthErrors'
    token: 'String'
  }
  CreateNoteMutationReturnType: { // field return type name
    error: 'NoteErrors'
    note: 'Note'
  }
  Mutation: { // field return type name
    createNote: 'CreateNoteMutationReturnType'
    createUser: 'AuthMutationReturnType'
    signIn: 'AuthMutationReturnType'
  }
  Note: { // field return type name
    author: 'User'
    authorId: 'Int'
    id: 'Int'
    isPublished: 'Boolean'
    markdown: 'String'
    title: 'String'
  }
  Query: { // field return type name
    hello: 'String'
    me: 'User'
  }
  User: { // field return type name
    email: 'String'
    fullName: 'String'
    id: 'Int'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createNote: { // args
      markdown: string; // String!
      title: string; // String!
      userId: string; // ID!
    }
    createUser: { // args
      email: string; // String!
      fullName: string; // String!
      password: string; // String!
      username: string; // String!
    }
    signIn: { // args
      email?: string | null; // String
      password: string; // String!
      username?: string | null; // String
    }
  }
  Query: {
    hello: { // args
      name: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}